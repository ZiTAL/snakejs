(function(window,undefined){"use strict";var Hammer=function(element,options){return new Hammer.Instance(element,options||{})};Hammer.defaults={stop_browser_behavior:{userSelect:"none",touchAction:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};Hammer.HAS_POINTEREVENTS=navigator.pointerEnabled||navigator.msPointerEnabled;Hammer.HAS_TOUCHEVENTS="ontouchstart"in window;Hammer.MOBILE_REGEX=/mobile|tablet|ip(ad|hone|od)|android/i;Hammer.NO_MOUSEEVENTS=Hammer.HAS_TOUCHEVENTS&&navigator.userAgent.match(Hammer.MOBILE_REGEX);Hammer.EVENT_TYPES={};Hammer.DIRECTION_DOWN="down";Hammer.DIRECTION_LEFT="left";Hammer.DIRECTION_UP="up";Hammer.DIRECTION_RIGHT="right";Hammer.POINTER_MOUSE="mouse";Hammer.POINTER_TOUCH="touch";Hammer.POINTER_PEN="pen";Hammer.EVENT_START="start";Hammer.EVENT_MOVE="move";Hammer.EVENT_END="end";Hammer.DOCUMENT=document;Hammer.plugins={};Hammer.READY=false;function setup(){if(Hammer.READY){return}Hammer.event.determineEventTypes();for(var name in Hammer.gestures){if(Hammer.gestures.hasOwnProperty(name)){Hammer.detection.register(Hammer.gestures[name])}}Hammer.event.onTouch(Hammer.DOCUMENT,Hammer.EVENT_MOVE,Hammer.detection.detect);Hammer.event.onTouch(Hammer.DOCUMENT,Hammer.EVENT_END,Hammer.detection.detect);Hammer.READY=true}Hammer.Instance=function(element,options){var self=this;setup();this.element=element;this.enabled=true;this.options=Hammer.utils.extend(Hammer.utils.extend({},Hammer.defaults),options||{});if(this.options.stop_browser_behavior){Hammer.utils.stopDefaultBrowserBehavior(this.element,this.options.stop_browser_behavior)}Hammer.event.onTouch(element,Hammer.EVENT_START,function(ev){if(self.enabled){Hammer.detection.startDetect(self,ev)}});return this};Hammer.Instance.prototype={on:function onEvent(gesture,handler){var gestures=gesture.split(" ");for(var t=0;t<gestures.length;t++){this.element.addEventListener(gestures[t],handler,false)}return this},off:function offEvent(gesture,handler){var gestures=gesture.split(" ");for(var t=0;t<gestures.length;t++){this.element.removeEventListener(gestures[t],handler,false)}return this},trigger:function triggerEvent(gesture,eventData){var event=Hammer.DOCUMENT.createEvent("Event");event.initEvent(gesture,true,true);event.gesture=eventData;var element=this.element;if(Hammer.utils.hasParent(eventData.target,element)){element=eventData.target}element.dispatchEvent(event);return this},enable:function enable(state){this.enabled=state;return this}};var last_move_event=null;var enable_detect=false;var touch_triggered=false;Hammer.event={bindDom:function(element,type,handler){var types=type.split(" ");for(var t=0;t<types.length;t++){element.addEventListener(types[t],handler,false)}},onTouch:function onTouch(element,eventType,handler){var self=this;this.bindDom(element,Hammer.EVENT_TYPES[eventType],function bindDomOnTouch(ev){var sourceEventType=ev.type.toLowerCase();if(sourceEventType.match(/mouse/)&&touch_triggered){return}else if(sourceEventType.match(/touch/)||sourceEventType.match(/pointerdown/)||sourceEventType.match(/mouse/)&&ev.which===1){enable_detect=true}if(sourceEventType.match(/touch|pointer/)){touch_triggered=true}var count_touches=0;if(enable_detect){if(Hammer.HAS_POINTEREVENTS&&eventType!=Hammer.EVENT_END){count_touches=Hammer.PointerEvent.updatePointer(eventType,ev)}else if(sourceEventType.match(/touch/)){count_touches=ev.touches.length}else if(!touch_triggered){count_touches=sourceEventType.match(/up/)?0:1}if(count_touches>0&&eventType==Hammer.EVENT_END){eventType=Hammer.EVENT_MOVE}else if(!count_touches){eventType=Hammer.EVENT_END}if(!count_touches&&last_move_event!==null){ev=last_move_event}else{last_move_event=ev}handler.call(Hammer.detection,self.collectEventData(element,eventType,ev));if(Hammer.HAS_POINTEREVENTS&&eventType==Hammer.EVENT_END){count_touches=Hammer.PointerEvent.updatePointer(eventType,ev)}}if(!count_touches){last_move_event=null;enable_detect=false;touch_triggered=false;Hammer.PointerEvent.reset()}})},determineEventTypes:function determineEventTypes(){var types;if(Hammer.HAS_POINTEREVENTS){types=Hammer.PointerEvent.getEvents()}else if(Hammer.NO_MOUSEEVENTS){types=["touchstart","touchmove","touchend touchcancel"]}else{types=["touchstart mousedown","touchmove mousemove","touchend touchcancel mouseup"]}Hammer.EVENT_TYPES[Hammer.EVENT_START]=types[0];Hammer.EVENT_TYPES[Hammer.EVENT_MOVE]=types[1];Hammer.EVENT_TYPES[Hammer.EVENT_END]=types[2]},getTouchList:function getTouchList(ev){if(Hammer.HAS_POINTEREVENTS){return Hammer.PointerEvent.getTouchList()}else if(ev.touches){return ev.touches}else{return[{identifier:1,pageX:ev.pageX,pageY:ev.pageY,target:ev.target}]}},collectEventData:function collectEventData(element,eventType,ev){var touches=this.getTouchList(ev,eventType);var pointerType=Hammer.POINTER_TOUCH;if(ev.type.match(/mouse/)||Hammer.PointerEvent.matchType(Hammer.POINTER_MOUSE,ev)){pointerType=Hammer.POINTER_MOUSE}return{center:Hammer.utils.getCenter(touches),timeStamp:(new Date).getTime(),target:ev.target,touches:touches,eventType:eventType,pointerType:pointerType,srcEvent:ev,preventDefault:function(){if(this.srcEvent.preventManipulation){this.srcEvent.preventManipulation()}if(this.srcEvent.preventDefault){this.srcEvent.preventDefault()}},stopPropagation:function(){this.srcEvent.stopPropagation()},stopDetect:function(){return Hammer.detection.stopDetect()}}}};Hammer.PointerEvent={pointers:{},getTouchList:function(){var self=this;var touchlist=[];Object.keys(self.pointers).sort().forEach(function(id){touchlist.push(self.pointers[id])});return touchlist},updatePointer:function(type,pointerEvent){if(type==Hammer.EVENT_END){this.pointers={}}else{pointerEvent.identifier=pointerEvent.pointerId;this.pointers[pointerEvent.pointerId]=pointerEvent}return Object.keys(this.pointers).length},matchType:function(pointerType,ev){if(!ev.pointerType){return false}var types={};types[Hammer.POINTER_MOUSE]=ev.pointerType==ev.MSPOINTER_TYPE_MOUSE||ev.pointerType==Hammer.POINTER_MOUSE;types[Hammer.POINTER_TOUCH]=ev.pointerType==ev.MSPOINTER_TYPE_TOUCH||ev.pointerType==Hammer.POINTER_TOUCH;types[Hammer.POINTER_PEN]=ev.pointerType==ev.MSPOINTER_TYPE_PEN||ev.pointerType==Hammer.POINTER_PEN;return types[pointerType]},getEvents:function(){return["pointerdown MSPointerDown","pointermove MSPointerMove","pointerup pointercancel MSPointerUp MSPointerCancel"]},reset:function(){this.pointers={}}};Hammer.utils={extend:function extend(dest,src,merge){for(var key in src){if(dest[key]!==undefined&&merge){continue}dest[key]=src[key]}return dest},hasParent:function(node,parent){while(node){if(node==parent){return true}node=node.parentNode}return false},getCenter:function getCenter(touches){var valuesX=[],valuesY=[];for(var t=0,len=touches.length;t<len;t++){valuesX.push(touches[t].pageX);valuesY.push(touches[t].pageY)}return{pageX:(Math.min.apply(Math,valuesX)+Math.max.apply(Math,valuesX))/2,pageY:(Math.min.apply(Math,valuesY)+Math.max.apply(Math,valuesY))/2}},getVelocity:function getVelocity(delta_time,delta_x,delta_y){return{x:Math.abs(delta_x/delta_time)||0,y:Math.abs(delta_y/delta_time)||0}},getAngle:function getAngle(touch1,touch2){var y=touch2.pageY-touch1.pageY,x=touch2.pageX-touch1.pageX;return Math.atan2(y,x)*180/Math.PI},getDirection:function getDirection(touch1,touch2){var x=Math.abs(touch1.pageX-touch2.pageX),y=Math.abs(touch1.pageY-touch2.pageY);if(x>=y){return touch1.pageX-touch2.pageX>0?Hammer.DIRECTION_LEFT:Hammer.DIRECTION_RIGHT}else{return touch1.pageY-touch2.pageY>0?Hammer.DIRECTION_UP:Hammer.DIRECTION_DOWN}},getDistance:function getDistance(touch1,touch2){var x=touch2.pageX-touch1.pageX,y=touch2.pageY-touch1.pageY;return Math.sqrt(x*x+y*y)},getScale:function getScale(start,end){if(start.length>=2&&end.length>=2){return this.getDistance(end[0],end[1])/this.getDistance(start[0],start[1])}return 1},getRotation:function getRotation(start,end){if(start.length>=2&&end.length>=2){return this.getAngle(end[1],end[0])-this.getAngle(start[1],start[0])}return 0},isVertical:function isVertical(direction){return direction==Hammer.DIRECTION_UP||direction==Hammer.DIRECTION_DOWN},stopDefaultBrowserBehavior:function stopDefaultBrowserBehavior(element,css_props){var prop,vendors=["webkit","khtml","moz","ms","o",""];if(!css_props||!element.style){return}for(var i=0;i<vendors.length;i++){for(var p in css_props){if(css_props.hasOwnProperty(p)){prop=p;if(vendors[i]){prop=vendors[i]+prop.substring(0,1).toUpperCase()+prop.substring(1)}element.style[prop]=css_props[p]}}}if(css_props.userSelect=="none"){element.onselectstart=function(){return false}}}};Hammer.detection={gestures:[],current:null,previous:null,stopped:false,startDetect:function startDetect(inst,eventData){if(this.current){return}this.stopped=false;this.current={inst:inst,startEvent:Hammer.utils.extend({},eventData),lastEvent:false,name:""};this.detect(eventData)},detect:function detect(eventData){if(!this.current||this.stopped){return}eventData=this.extendEventData(eventData);var inst_options=this.current.inst.options;for(var g=0,len=this.gestures.length;g<len;g++){var gesture=this.gestures[g];if(!this.stopped&&inst_options[gesture.name]!==false){if(gesture.handler.call(gesture,eventData,this.current.inst)===false){this.stopDetect();break}}}if(this.current){this.current.lastEvent=eventData}if(eventData.eventType==Hammer.EVENT_END&&!eventData.touches.length-1){this.stopDetect()}return eventData},stopDetect:function stopDetect(){this.previous=Hammer.utils.extend({},this.current);this.current=null;this.stopped=true},extendEventData:function extendEventData(ev){var startEv=this.current.startEvent;if(startEv&&(ev.touches.length!=startEv.touches.length||ev.touches===startEv.touches)){startEv.touches=[];for(var i=0,len=ev.touches.length;i<len;i++){startEv.touches.push(Hammer.utils.extend({},ev.touches[i]))}}var delta_time=ev.timeStamp-startEv.timeStamp,delta_x=ev.center.pageX-startEv.center.pageX,delta_y=ev.center.pageY-startEv.center.pageY,velocity=Hammer.utils.getVelocity(delta_time,delta_x,delta_y);Hammer.utils.extend(ev,{deltaTime:delta_time,deltaX:delta_x,deltaY:delta_y,velocityX:velocity.x,velocityY:velocity.y,distance:Hammer.utils.getDistance(startEv.center,ev.center),angle:Hammer.utils.getAngle(startEv.center,ev.center),direction:Hammer.utils.getDirection(startEv.center,ev.center),scale:Hammer.utils.getScale(startEv.touches,ev.touches),rotation:Hammer.utils.getRotation(startEv.touches,ev.touches),startEvent:startEv});return ev},register:function register(gesture){var options=gesture.defaults||{};if(options[gesture.name]===undefined){options[gesture.name]=true}Hammer.utils.extend(Hammer.defaults,options,true);gesture.index=gesture.index||1e3;this.gestures.push(gesture);this.gestures.sort(function(a,b){if(a.index<b.index){return-1}if(a.index>b.index){return 1}return 0});return this.gestures}};Hammer.gestures=Hammer.gestures||{};Hammer.gestures.Hold={name:"hold",index:10,defaults:{hold_timeout:500,hold_threshold:1},timer:null,handler:function holdGesture(ev,inst){switch(ev.eventType){case Hammer.EVENT_START:clearTimeout(this.timer);Hammer.detection.current.name=this.name;this.timer=setTimeout(function(){if(Hammer.detection.current.name=="hold"){inst.trigger("hold",ev)}},inst.options.hold_timeout);break;case Hammer.EVENT_MOVE:if(ev.distance>inst.options.hold_threshold){clearTimeout(this.timer)}break;case Hammer.EVENT_END:clearTimeout(this.timer);break}}};Hammer.gestures.Tap={name:"tap",index:100,defaults:{tap_max_touchtime:250,tap_max_distance:10,tap_always:true,doubletap_distance:20,doubletap_interval:300},handler:function tapGesture(ev,inst){if(ev.eventType==Hammer.EVENT_END){var prev=Hammer.detection.previous,did_doubletap=false;if(ev.deltaTime>inst.options.tap_max_touchtime||ev.distance>inst.options.tap_max_distance){return}if(prev&&prev.name=="tap"&&ev.timeStamp-prev.lastEvent.timeStamp<inst.options.doubletap_interval&&ev.distance<inst.options.doubletap_distance){inst.trigger("doubletap",ev);did_doubletap=true}if(!did_doubletap||inst.options.tap_always){Hammer.detection.current.name="tap";inst.trigger(Hammer.detection.current.name,ev)}}}};Hammer.gestures.Swipe={name:"swipe",index:40,defaults:{swipe_max_touches:1,swipe_velocity:.7},handler:function swipeGesture(ev,inst){if(ev.eventType==Hammer.EVENT_END){if(inst.options.swipe_max_touches>0&&ev.touches.length>inst.options.swipe_max_touches){return}if(ev.velocityX>inst.options.swipe_velocity||ev.velocityY>inst.options.swipe_velocity){inst.trigger(this.name,ev);inst.trigger(this.name+ev.direction,ev)}}}};Hammer.gestures.Drag={name:"drag",index:50,defaults:{drag_min_distance:10,drag_max_touches:1,drag_block_horizontal:false,drag_block_vertical:false,drag_lock_to_axis:false,drag_lock_min_distance:25},triggered:false,handler:function dragGesture(ev,inst){if(Hammer.detection.current.name!=this.name&&this.triggered){inst.trigger(this.name+"end",ev);this.triggered=false;return}if(inst.options.drag_max_touches>0&&ev.touches.length>inst.options.drag_max_touches){return}switch(ev.eventType){case Hammer.EVENT_START:this.triggered=false;break;case Hammer.EVENT_MOVE:if(ev.distance<inst.options.drag_min_distance&&Hammer.detection.current.name!=this.name){return}Hammer.detection.current.name=this.name;if(Hammer.detection.current.lastEvent.drag_locked_to_axis||inst.options.drag_lock_to_axis&&inst.options.drag_lock_min_distance<=ev.distance){ev.drag_locked_to_axis=true}var last_direction=Hammer.detection.current.lastEvent.direction;if(ev.drag_locked_to_axis&&last_direction!==ev.direction){if(Hammer.utils.isVertical(last_direction)){ev.direction=ev.deltaY<0?Hammer.DIRECTION_UP:Hammer.DIRECTION_DOWN}else{ev.direction=ev.deltaX<0?Hammer.DIRECTION_LEFT:Hammer.DIRECTION_RIGHT}}if(!this.triggered){inst.trigger(this.name+"start",ev);this.triggered=true}inst.trigger(this.name,ev);inst.trigger(this.name+ev.direction,ev);if(inst.options.drag_block_vertical&&Hammer.utils.isVertical(ev.direction)||inst.options.drag_block_horizontal&&!Hammer.utils.isVertical(ev.direction)){ev.preventDefault()}break;case Hammer.EVENT_END:if(this.triggered){inst.trigger(this.name+"end",ev)}this.triggered=false;break}}};Hammer.gestures.Transform={name:"transform",index:45,defaults:{transform_min_scale:.01,transform_min_rotation:1,transform_always_block:false},triggered:false,handler:function transformGesture(ev,inst){if(Hammer.detection.current.name!=this.name&&this.triggered){inst.trigger(this.name+"end",ev);this.triggered=false;return}if(ev.touches.length<2){return}if(inst.options.transform_always_block){ev.preventDefault()}switch(ev.eventType){case Hammer.EVENT_START:this.triggered=false;break;case Hammer.EVENT_MOVE:var scale_threshold=Math.abs(1-ev.scale);var rotation_threshold=Math.abs(ev.rotation);if(scale_threshold<inst.options.transform_min_scale&&rotation_threshold<inst.options.transform_min_rotation){return}Hammer.detection.current.name=this.name;if(!this.triggered){inst.trigger(this.name+"start",ev);this.triggered=true}inst.trigger(this.name,ev);if(rotation_threshold>inst.options.transform_min_rotation){inst.trigger("rotate",ev)}if(scale_threshold>inst.options.transform_min_scale){inst.trigger("pinch",ev);inst.trigger("pinch"+(ev.scale<1?"in":"out"),ev)}break;case Hammer.EVENT_END:if(this.triggered){inst.trigger(this.name+"end",ev)}this.triggered=false;break}}};Hammer.gestures.Touch={name:"touch",index:-Infinity,defaults:{prevent_default:false,prevent_mouseevents:false},handler:function touchGesture(ev,inst){if(inst.options.prevent_mouseevents&&ev.pointerType==Hammer.POINTER_MOUSE){ev.stopDetect();return}if(inst.options.prevent_default){ev.preventDefault()}if(ev.eventType==Hammer.EVENT_START){inst.trigger(this.name,ev)}}};Hammer.gestures.Release={name:"release",index:Infinity,handler:function releaseGesture(ev,inst){if(ev.eventType==Hammer.EVENT_END){inst.trigger(this.name,ev)}}};if(typeof module==="object"&&typeof module.exports==="object"){module.exports=Hammer}else{window.Hammer=Hammer;if(typeof window.define==="function"&&window.define.amd){window.define("hammer",[],function(){return Hammer})}}})(this);